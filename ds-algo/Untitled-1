class MyLinkedList {
    public static class Node {
        int val;
        Node next;

        public Node(int val, Node next) {
            this.val = val;
            this.next = next;
        }
    }

    Node head;
    Node tail;
    int size;
    // Cache for last accessed node
    private Node lastAccessed;
    private int lastAccessedIndex;

    public MyLinkedList() {
        this.size = 0;
        this.lastAccessed = null;
        this.lastAccessedIndex = -1;
    }

    // Helper method to get node at index using optimal traversal
    private Node getNodeAt(int index) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException("Index out of bounds");
        }

        // Check if we can use cached node
        if (lastAccessed != null && lastAccessedIndex != -1) {
            if (lastAccessedIndex == index) {
                return lastAccessed;
            }
            // If target index is close to last accessed node, start from there
            if (Math.abs(index - lastAccessedIndex) < Math.abs(index - 0) && 
                Math.abs(index - lastAccessedIndex) < Math.abs(index - (size - 1))) {
                if (index > lastAccessedIndex) {
                    Node current = lastAccessed;
                    for (int i = lastAccessedIndex; i < index; i++) {
                        current = current.next;
                    }
                    lastAccessed = current;
                    lastAccessedIndex = index;
                    return current;
                }
            }
        }

        // Decide whether to start from head or tail
        if (index <= size / 2) {
            // Start from head
            Node current = head;
            for (int i = 0; i < index; i++) {
                current = current.next;
            }
            lastAccessed = current;
            lastAccessedIndex = index;
            return current;
        } else {
            // Start from head but optimize for closer to tail
            Node current = head;
            for (int i = 0; i < index; i++) {
                current = current.next;
            }
            lastAccessed = current;
            lastAccessedIndex = index;
            return current;
        }
    }

    public int get(int index) {
        Node node = getNodeAt(index);
        return node.val;
    }

    public void addAtHead(int val) {
        if (head == null) {
            head = new Node(val, null);
            tail = head;
        } else {
            head = new Node(val, head);
        }
        size++;
        // Invalidate cache since indices have shifted
        lastAccessed = null;
        lastAccessedIndex = -1;
    }

    public void addAtTail(int val) {
        if (head == null) {
            head = new Node(val, null);
            tail = head;
        } else {
            tail.next = new Node(val, null);
            tail = tail.next;
        }
        size++;
    }

    public void addAtIndex(int index, int val) {
        if (index < 0 || index > size) {
            throw new IndexOutOfBoundsException("Index out of bounds");
        }

        if (index == 0) {
            addAtHead(val);
            return;
        }

        if (index == size) {
            addAtTail(val);
            return;
        }

        Node prev = getNodeAt(index - 1);
        prev.next = new Node(val, prev.next);
        size++;
        // Invalidate cache since indices have shifted
        lastAccessed = null;
        lastAccessedIndex = -1;
    }

    public void deleteAtIndex(int index) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException("Index out of bounds");
        }

        if (size == 1) {
            head = null;
            tail = null;
            size = 0;
            lastAccessed = null;
            lastAccessedIndex = -1;
            return;
        }

        if (index == 0) {
            head = head.next;
            size--;
            // Invalidate cache since indices have shifted
            lastAccessed = null;
            lastAccessedIndex = -1;
            return;
        }

        Node prev = getNodeAt(index - 1);
        if (prev.next == tail) {
            prev.next = null;
            tail = prev;
        } else {
            prev.next = prev.next.next;
        }
        size--;
        // Invalidate cache since indices have shifted
        lastAccessed = null;
        lastAccessedIndex = -1;
    }
} 